//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/New Folder/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""PlayerInput"",
            ""id"": ""af3cc61f-2afa-4d4f-91f7-d1e1e09df550"",
            ""actions"": [
                {
                    ""name"": ""Balance"",
                    ""type"": ""Value"",
                    ""id"": ""8bd820c9-c71b-4b6e-bf17-2d46d77f2d36"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move_L"",
                    ""type"": ""Button"",
                    ""id"": ""9de778de-d372-44cd-bd23-cd7d4f2fb344"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_R"",
                    ""type"": ""Button"",
                    ""id"": ""ddc09e89-a242-4d9e-b1e7-f82516b58671"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""eda00469-4ba6-4e8c-9c28-94409e0062a5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balance"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8b3d11b8-fe94-4d61-a267-f6b352a14246"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2bf2c7b0-fa15-41af-a4ce-323e57d8aa79"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Balance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""087b72ea-35f0-4115-8328-4ced373d14be"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e21a68fd-3b23-4ac6-a1dd-e1b5cc44fc2b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInput
        m_PlayerInput = asset.FindActionMap("PlayerInput", throwIfNotFound: true);
        m_PlayerInput_Balance = m_PlayerInput.FindAction("Balance", throwIfNotFound: true);
        m_PlayerInput_Move_L = m_PlayerInput.FindAction("Move_L", throwIfNotFound: true);
        m_PlayerInput_Move_R = m_PlayerInput.FindAction("Move_R", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInput
    private readonly InputActionMap m_PlayerInput;
    private IPlayerInputActions m_PlayerInputActionsCallbackInterface;
    private readonly InputAction m_PlayerInput_Balance;
    private readonly InputAction m_PlayerInput_Move_L;
    private readonly InputAction m_PlayerInput_Move_R;
    public struct PlayerInputActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerInputActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Balance => m_Wrapper.m_PlayerInput_Balance;
        public InputAction @Move_L => m_Wrapper.m_PlayerInput_Move_L;
        public InputAction @Move_R => m_Wrapper.m_PlayerInput_Move_R;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputActions instance)
        {
            if (m_Wrapper.m_PlayerInputActionsCallbackInterface != null)
            {
                @Balance.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBalance;
                @Balance.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBalance;
                @Balance.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnBalance;
                @Move_L.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_L;
                @Move_L.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_L;
                @Move_L.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_L;
                @Move_R.started -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_R;
                @Move_R.performed -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_R;
                @Move_R.canceled -= m_Wrapper.m_PlayerInputActionsCallbackInterface.OnMove_R;
            }
            m_Wrapper.m_PlayerInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Balance.started += instance.OnBalance;
                @Balance.performed += instance.OnBalance;
                @Balance.canceled += instance.OnBalance;
                @Move_L.started += instance.OnMove_L;
                @Move_L.performed += instance.OnMove_L;
                @Move_L.canceled += instance.OnMove_L;
                @Move_R.started += instance.OnMove_R;
                @Move_R.performed += instance.OnMove_R;
                @Move_R.canceled += instance.OnMove_R;
            }
        }
    }
    public PlayerInputActions @PlayerInput => new PlayerInputActions(this);
    public interface IPlayerInputActions
    {
        void OnBalance(InputAction.CallbackContext context);
        void OnMove_L(InputAction.CallbackContext context);
        void OnMove_R(InputAction.CallbackContext context);
    }
}
